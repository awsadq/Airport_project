package com.example.airport_project.util;

import com.example.airport_project.model.CheckIn;
import com.itextpdf.io.font.constants.StandardFonts;
import com.itextpdf.kernel.font.PdfFont;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import org.springframework.stereotype.Component;

import java.io.ByteArrayOutputStream;
import java.time.format.DateTimeFormatter;

@Component
public class BoardingPassGenerator {

    public byte[] generatePdf(CheckIn checkIn) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();

        try {
            PdfWriter writer = new PdfWriter(out);
            PdfDocument pdf = new PdfDocument(writer);
            Document document = new Document(pdf);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
            PdfFont font = PdfFontFactory.createFont(StandardFonts.HELVETICA);
            document.setFont(font);

            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");

            // üõ´ –ó–∞–≥–æ–ª–æ–≤–æ–∫
            document.add(new Paragraph("üõ´ BOARDING PASS")
                    .setBold()
                    .setFontSize(20)
                    .setMarginBottom(15));

            // üßæ –¢–∞–±–ª–∏—Ü–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏
            float[] columnWidths = {180F, 300F};
            Table table = new Table(columnWidths);

            table.addCell(new Paragraph("üë§ Passenger Name").setBold());
            table.addCell(new Paragraph(checkIn.getBooking().getPassengerName()));

            table.addCell(new Paragraph("ü™™ Passport Number").setBold());
            table.addCell(new Paragraph(checkIn.getBooking().getPassportNumber()));

            table.addCell(new Paragraph("‚úàÔ∏è Flight Number").setBold());
            table.addCell(new Paragraph(checkIn.getBooking().getFlight().getFlightNumber()));

            table.addCell(new Paragraph("üõ´ Departure Airport").setBold());
            table.addCell(new Paragraph(checkIn.getBooking().getFlight().getDepartureAirport()));

            table.addCell(new Paragraph("üõ¨ Arrival Airport").setBold());
            table.addCell(new Paragraph(checkIn.getBooking().getFlight().getArrivalAirport()));

            table.addCell(new Paragraph("üí∫ Seat").setBold());
            table.addCell(new Paragraph(checkIn.getBooking().getSeatNumber()));

            table.addCell(new Paragraph("üìÑ Boarding Code").setBold());
            table.addCell(new Paragraph(checkIn.getBoardingPass()));

            table.addCell(new Paragraph("üïí Check-In Time").setBold());
            table.addCell(new Paragraph(checkIn.getCheckInTime().format(formatter)));

            document.add(table);

            // ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            document.add(new Paragraph("\nHave a nice flight! ‚úàÔ∏è")
                    .setItalic()
                    .setFontSize(12)
                    .setMarginTop(10));

            document.close();
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: " + e.getMessage(), e);
        }

        return out.toByteArray();
    }
}
